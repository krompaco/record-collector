@{
    var listId = "l" + Guid.NewGuid().ToString("n");
}

<li>
    <div class="flex justify-between w-[calc(100vw-32px)] sm:w-[450px]">
        <div class="@GetClassByLevel() flex items-center">
            <a class="rc-link my-[2px]" href="@Model?.RelativeUrl">@Model?.Text</a>
        </div>
        @if (Model?.ChildItems != null && Model.ChildItems.Count > 0 && Model.Localizer != null)
        {
            <div>
                <button
                    type="button"
                    aria-expanded="false"
                    aria-controls="@listId"
                    aria-label="@Model.Localizer["Open"] @Model.Text"
                    class="group p-[6px] mt-[3px] rc-menu-link justify-self-end"
                    data-script="on mousedown 
                        toggle .hidden on #@listId
                        then if @@aria-expanded == 'true'
                            set @@aria-expanded to 'false'
                            set @@aria-label to '@Model.Localizer["Open"] @Model.Text'
                        else
                            set @@aria-expanded to 'true'
                            set @@aria-label to '@Model.Localizer["Close"] @Model.Text'
                        end">
                    <span class="block group-aria-expanded:hidden">
                        <svg aria-hidden="true" class="w-[20px] h-[20px]" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                    </span>
                    <span class="hidden group-aria-expanded:block">
                        <svg aria-hidden="true" class="w-[20px] h-[20px]" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>
                    </span>
                </button>
            </div>
        }
    </div>
	@if (Model?.ChildItems != null && Model.ChildItems.Count > 0)
    {
        <ul id="@listId" class="hidden">
            @foreach (var child in Model.ChildItems)
            {
                <MenuItem Model="@child" />
            }
        </ul>
    }
</li>

@code {
    [Parameter]
    public MenuItemViewModel? Model { get; set; }

    private string GetClassByLevel()
    {
        if (Model == null)
        {
            return string.Empty;
        }

        switch (Model.Level)
        {
            case 1:
                return "pr-2 text-xl font-bold";
            case 2:
                return "pl-6 pr-2 py-2 text-xl";
            case 3:
                return "pl-9 pr-2 py-3 text-lg";
            case 4:
                return "pl-12 pr-2 py-3 text-base";
        }

        return "pl-12 pr-2 py-3 text-sm";
    }
}
